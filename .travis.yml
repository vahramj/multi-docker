# every time we push new code to github, all these steps will run.
# if we don't want it, we can use the branch config.
#i.e. "branches: only: -myBranchName" or "on: branch: myBranchName"
services:
  - docker

before_install:
  - docker build -t vahramj/react-test -f ./client/Dockerfile.dev  ./client
  # if we needed to test other subapp, e.g. server, worker, we would just add the build here
  # - docker build myOtherProject

# we are using dev build to run the tests
script:
  - docker run -e CI=true vahramj/react-test npm test
  # and those others built above, would be run here
  # - docker run myOtherProject

# if script(s) run successfully => test passed, we build production version of our subprojects.
after-success:
  - docker build -t vahramj/multi-client ./client
  - docker build -t vahramj/multi-nginx ./nginx
  - docker build -t vahramj/multi-worker ./worker
  - docker build -t vahramj/multi-server ./server

  # log into docker-cli
  # echo grabs the value of DOCKER_PASSWORD variable
  # and, via stdin, pipes it to what comes next, i.e. docker-login
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

  # pushing the prod built images to dockerhub
  - docker push vahramj/multi-client
  - docker push vahramj/multi-nginx
  - docker push vahramj/multi-worker
  - docker push vahramj/multi-server

deploy:
  provider: elasticbeanstalk
  region: us-east-1
  app: multi-docker
  env: MultiDocker-env
  bucket_name: elasticbeanstalk-us-east-1-975710334054
  bucket_path: multi-docker
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
