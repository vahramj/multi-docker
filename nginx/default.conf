# we are telling nginx that there is an upstream(a server hiding behind nginx) that we call client
    # and it's network/server url is client(defined by docker-compose) 
    # and the port is 3000(defined by create react app for dev and client/ngingx/default.conf for prod)
upstream client {
    server client:3000;
}

# server name "api" is defined in docker-compose.yml, the port is defined in server/index.js
upstream api {
    server api:5000;
}

# configuring nginx server itself
server {
    # the server will listen for requests on port 80
        # since the nginx server is going to live inside a container as well, 
        # we can port map this 80 to anything at run time
    listen 80;

    # for all reqs to "/" nginx will act like a proxy and will redierct the req to the "client" upstream
    location / {
        proxy_pass http://client;
    }

    # This config will let RHM socket connection get through nginx and reach client server upstream.
    # [what do 'Upgrade $http_upgrade' and 'Connection "Upgrade"' mean?]
    # We could remove this in the prod copy of this file, but it's not a biggie, 
        # so we won't create a prod default.conf just for this
    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    # for all reqs to "/api" nginx will act like a proxy and will redierct the req to the "client" upstream
    location /api {
        # we are redirecting the req wo the /api portion of the path 
            # requests sent to nginx at /api/some/path will end up hitting "api" server at /some/path
        # break directive stops any other rewrite rules from being applied
            # [i.e. rules applied to other proxies?? e.g. ?]
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}